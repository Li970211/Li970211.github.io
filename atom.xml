<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一路</title>
  
  <subtitle>每天进步一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Li970211.github.io/"/>
  <updated>2018-03-31T14:32:54.794Z</updated>
  <id>http://Li970211.github.io/</id>
  
  <author>
    <name>李嘉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3学习总结(2)---过渡</title>
    <link href="http://Li970211.github.io/2018/03/31/CSS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2/"/>
    <id>http://Li970211.github.io/2018/03/31/CSS学习总结-2/</id>
    <published>2018-03-31T14:28:23.000Z</published>
    <updated>2018-03-31T14:32:54.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><p>   transition是一个简写属性，用于 transition-property,transition-duration,transition-timing-function, 和transition-delay。<br>   CSS 过渡 由简写属性 transition 定义是最好的方式，可以避免属性值列表长度不一，节省调试时间<br>   默认值：<br>       transition-delay: 0s<br>       transition-duration: 0s<br>       transition-property: all<br>       transition-timing-function: ease<br>    下面我们分别介绍一下这些属性</p><h2 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h2><p> 用于指定应用过渡属性的名称<br> 1.默认值为 all，表示所有可被动画的属性都表现出过渡动画。(<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties</a>)<br> 可以指定多个 property<br> 2.属性值：<br>   none<br>       没有过渡动画。<br>   all<br>       所有可被动画的属性都表现出过渡动画。<br>   IDENT<br>       属性名称 （可以指定多个）</p><p> 3.代码实例<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">*&#123;</span><br><span class="line">300<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">300<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">margin</span>: auto;</span><br><span class="line">300<span class="attribute">background</span>: pink;</span><br><span class="line">300<span class="attribute">transition-property</span>:width,background;</span><br><span class="line">300<span class="attribute">transition-duration</span>:<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">300cursor: pointer;//鼠标移入div,形状变成小手</span><br><span class="line">300<span class="selector-tag">width</span>: 600<span class="selector-tag">px</span>;</span><br><span class="line">300<span class="selector-tag">height</span>: 600<span class="selector-tag">px</span>;</span><br><span class="line">300<span class="selector-tag">background</span>: <span class="selector-tag">deeppink</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这里transition-property设置了宽width和背景background这两个属性表现出过渡动画，过渡时间是3秒。当鼠标移入div中的时候，div的高会立即变成600px,没有过渡效果。而宽和背景在变化到最终效果都有3s的过渡时间。</p><h2 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h2><p>  1.属性以秒或毫秒为单位指定过渡动画所需的时间。<br>  默认值为 0s ，表示不出现过渡动画。</p><p>  可以指定多个时长，每个时长会被应用到由 transition-property 指定的对应属性上。如果指定的时长个数小于属性个数，那么时长列表会重复。如果时长列表更长，那么该列表会被裁减。两种情况下，属性列表都保持不变。</p><p>  2.属性值<br>         以毫秒或秒为单位的数值<br>         <time> 类型。表示过渡属性从旧的值转变到新的值所需要的时间。如果时长是 0s ，表示不会呈现过渡动画，属性会瞬间完成转变。不接受负值。一定要加单位(不能写0 一定要写0s  1s,0s,1s)！</time></p><p> 3.代码实例<br>我们给一个div设置如下样式<br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">*&#123;</span><br><span class="line">300<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">300<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">margin</span>: auto;</span><br><span class="line">300<span class="attribute">background</span>: pink;</span><br><span class="line">300<span class="attribute">transition-property</span>:width,height;</span><br><span class="line">300<span class="attribute">transition-duration</span>:<span class="number">10s</span>,<span class="number">20s</span>,<span class="number">7s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">300<span class="attribute">cursor</span>: pointer;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">300<span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p> 运行结果，当鼠标移入div的时候，由于设置了宽和高设置了过渡效果，但是过渡时间设置了3个时间，那么最后一个时间会被列表裁剪。宽由200px到600px过渡时间10秒，高由200px到600px的过渡时间为20s</p><h2 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h2><p> 1.定义：属性规定了在过渡效果开始作用之前需要等待的时间。<br> 默认值：0s</p><p> 你可以指定多个延迟时间，每个延迟将会分别作用于你所指定的相符合的css属性。如果指定的时长个数小于属性个数，那么时长列表会重复。如果时长列表更长，那么该列表会被裁减。两种情况下，属性列表都保持不变</p><p> 2.属性值<br>        值以秒（s）或毫秒（ms）为单位，表明动画过渡效果将在何时开始。取值为正时会延迟一段时间来响应过渡效果；取值为负时会导致过渡立即开始。<br> 3.代码实例<br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">*&#123;</span><br><span class="line">300<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">300<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">margin</span>: auto;</span><br><span class="line">300<span class="attribute">background</span>: pink;</span><br><span class="line">300<span class="attribute">transition-property</span>:width;</span><br><span class="line">300<span class="attribute">transition-duration</span>:<span class="number">5s</span>;</span><br><span class="line">300<span class="attribute">transition-delay</span>:<span class="number">2s</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">300<span class="attribute">cursor</span>: pointer;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p> 运行，当鼠标移入div的时候等待2s之后开始过渡效果。</p><h2 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h2><p>1.说明：CSS属性受到 transition的影响，会产生不断变化的中间值，而 CSS transition-timing-function 属性用来描述这个中间值是怎样计算的。实质上，通过这个函数会建立一条加速度曲线，因此在整个transition变化过程中，变化速度可以不断改变<br>2.默认值：ease</p><p>你可以规定多个timing function,通过使用 transition-property属性，可以根据主列表(transition property的列表)给每个CSS属性应用相应的timing function.如果timing function的个数比主列表中数量少，缺少的值被设置为初始值（ease） 。如果timing function比主列表要多，timing function函数列表会被截断至合适的大小。这两种情况下声明的CSS属性都是有效的。</p><p>3.属性值：<br>         1、ease：（加速然后减速）默认值，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0).<br>         2、linear：（匀速），linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0).<br>         3、ease-in：(加速)，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0).<br>         4、ease-out：（减速），ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0).<br>         5、ease-in-out：（加速然后减速），ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)<br>         6、cubic-bezier： 贝塞尔曲线<br>         7、step-start：等同于steps(1,start)<br>              step-end：等同于steps(1,end)<br>               steps(<integer>,[,[start|end]]?)<br>                      第一个参数：必须为正整数，指定函数的步数<br>                      第二个参数：指定每一步的值发生变化的时间点（默认值end）</integer></p><p> 4.代码实例<br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">*&#123;</span><br><span class="line">300<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">300<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">margin</span>: auto;</span><br><span class="line">300<span class="attribute">background</span>: pink;</span><br><span class="line">300<span class="attribute">transition-property</span>:width;</span><br><span class="line">300<span class="attribute">transition-duration</span>:<span class="number">5s</span>;</span><br><span class="line">300<span class="attribute">transition-timing-function</span>:<span class="built_in">steps</span>(5,end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">300<span class="attribute">cursor</span>: pointer;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p> 运行，将鼠标移入div,宽由200到600分成5步进行过渡，渡动时间为5秒。</p><p><strong>关于transition过渡属性的简写</strong><br> 1.代码实例<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">*&#123;</span><br><span class="line">300<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">300<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">300<span class="attribute">margin</span>: auto;</span><br><span class="line">300<span class="attribute">background</span>: pink;</span><br><span class="line">300<span class="attribute">transition</span>:width <span class="number">2s</span> linear <span class="number">4s</span>,height <span class="number">4s</span> linear <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">300<span class="attribute">cursor</span>: pointer;</span><br><span class="line">300<span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">300<span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>上面transition:width 2s linear 4s,height 4s linear 2s;这条样式展开就是如下样式：<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition-property</span>: <span class="selector-tag">width</span>, <span class="selector-tag">height</span>;</span><br><span class="line"><span class="selector-tag">transition-duration</span>: 2<span class="selector-tag">s</span>, 4<span class="selector-tag">s</span>;</span><br><span class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">linear</span>, <span class="selector-tag">linear</span>;</span><br><span class="line"><span class="selector-tag">transition-delay</span>: 4<span class="selector-tag">s</span>, 2<span class="selector-tag">s</span>;</span><br></pre></td></tr></table></figure></p><p> 当鼠标移入div的时候，等待两秒后，高度先变化，到高度变化2秒后相当于于宽等待了四秒，宽也开始变化。两者都是匀速变化。<br> 最后，要注意当过渡完成时触发一个事件，在符合标准的浏览器下，这个事件是 transitionend, 在 WebKit 下是 webkitTransitionEnd<br> （每一个拥有过渡的属性在其完成过渡时都会触发一次transitionend事件）<br> 在transition完成前设置 display: none，事件同样不会被触发</p>]]></content>
    
    <summary type="html">
    
      transition： 众所周知，css效率极高，其变化的过程往往都是在一瞬间完成，速度极快。 CSS transition 提供了一种在更改CSS属性时控制动画速度的方法。 其可以让属性变化成为一个持续一段时间的过程，而不是立即生效的。 比如，将一个元素的颜色从白色改为黑色，通常这个改变是立即生效的， 使用 CSS transitions 后该元素的颜色将逐渐从白色变为黑色， 按照一定的曲线速率变化。这个过程可以自定义。
    
    </summary>
    
      <category term="CSS" scheme="http://Li970211.github.io/categories/CSS/"/>
    
    
      <category term="CSS3过渡" scheme="http://Li970211.github.io/tags/CSS3%E8%BF%87%E6%B8%A1/"/>
    
  </entry>
  
  <entry>
    <title>CSS3学习总结1</title>
    <link href="http://Li970211.github.io/2018/03/27/css/"/>
    <id>http://Li970211.github.io/2018/03/27/css/</id>
    <published>2018-03-27T08:49:42.000Z</published>
    <updated>2018-03-27T10:06:41.244Z</updated>
    
    <content type="html"><![CDATA[<p> 首先我们先了解什么是CSS?<br> CSS 指层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。<br> CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。浏览器读取css选择器的顺序是从右到左。<br> CSS3选择器规范地址：       <a href="https://www.w3.org/TR/2011/REC-css3-selectors-20110929/" target="_blank" rel="noopener">https://www.w3.org/TR/2011/REC-css3-selectors-20110929/</a><br> CSS3选择最新选择器规范:  <a href="https://www.w3.org/TR/selectors" target="_blank" rel="noopener">https://www.w3.org/TR/selectors</a><br> 分享的这两个网址是CSS3选择器的规范，大家在学习的时候可以看下。<br> 现在让我们一起看一下CSS3中的选择器。</p><h2 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1.基本选择器"></a>1.基本选择器</h2><p> <strong>通配符选择器</strong><br> 它是*的形式<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></p><p> <strong>元素选择器</strong><br> body（任何一个HTML元素）<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">height</span>:<span class="number">100%</span> &#125;</span><br></pre></td></tr></table></figure></p><p> <strong>类选择器</strong><br> 它是.的形式<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span> = <span class="string">"inner"</span>&gt;inner&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123; <span class="attribute">background</span>:pink &#125;</span><br></pre></td></tr></table></figure><p> <strong>ID选择器</strong><br> 它是#的形式<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span> = <span class="string">"inner"</span>&gt;inner&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span> &#123; <span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">height</span>:<span class="number">200px</span>; &#125;</span><br></pre></td></tr></table></figure><p> <strong>后代选择器</strong><br> 它是空格的形式,这里是选择所有的后代。<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span> = <span class="string">"wrap"</span>&gt;wrap</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span> = <span class="string">"inner"</span>&gt;inner&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-基本选择器扩展"><a href="#2-基本选择器扩展" class="headerlink" title="2.基本选择器扩展"></a>2.基本选择器扩展</h2><p> <strong>子元素选择器</strong><br> 子元素选择器也可称为直接后代选择器,使用&gt;来选择。注意此类选择器它不同于后代选择器，子元素选择器只是用来选择直接后代，不能匹配到深层次的后代元素.</p><p> <strong>后代选择器和子选择器区别：</strong><br>   1.写法不一样：<br>      后代选择器的标识为：空格<br>      如：ul li{width:150px;} ul和li之间用空格隔开<br>      子选择器的标识为：&gt;<br>      如：ul&gt;li{width:150px;} ul和li之间用&gt;隔开<br>   2.功能不一样：<br>   后代选择器(descendant selector），又称为包含选择器，可以选择某元素后代的元素，如上例，后代选择器是选择ul包围的所有元素中的所有li元素，包括儿子元素、孙子元素、曾孙元素等等等。<br>   与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素儿子元素的元素，子选择器仅仅选择ul包围的儿子元素中的 li元素，不包括孙元素、曾孙元素等等等。</p><p>   3.兼容性不一样：<br>     后代选择器主流浏览器都兼容。<br>     子选择器在IE6是不被支持的选择器，会出bug！</p><p> <strong>相邻兄弟选择器</strong><br>    使用+来选择。只匹配紧跟着的同胞元素。没有紧跟的兄弟元素匹配不到<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner1&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"first"</span>&gt;<span class="keyword">first</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner2&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner3&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner4&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner5&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner6&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &gt; <span class="selector-class">.first</span> + <span class="selector-class">.inner</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 运行后inner2字体变红，其他不变<br> <strong>通用兄弟选择器</strong><br> 它会匹配所有的兄弟元素(不需要紧跟),在使用 ~<br> 连接两个元素时,它会匹配第二个元素,条件是:<br> 它必须跟(不一定是紧跟)在第一个元素之后,且他们都有一个共同的父元素<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">   &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"first"</span>&gt;<span class="keyword">first</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">   &lt;p&gt;&lt;/p&gt;</span><br><span class="line">   &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner1</span><br><span class="line">   &lt;<span class="keyword">div</span>&gt;inner2&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">   &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">   &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner3&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">   &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner4&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">   &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;inner5&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> <span class="selector-id">#first</span> ~ <span class="selector-tag">div</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid;&#125;</span><br></pre></td></tr></table></figure><p> 运行之后我们可以通过控制台查看class为inner都有border: 1px solid这条边框样式，但是inner2这个div没有border: 1px solid这条样式，因为它不是id为first的div的兄弟元素。<br><strong>选择器分组</strong><br> 此处的逗号我们称之为结合符<br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,h3&#123;<span class="attribute">color</span>: pink;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3.属性选择器"></a>3.属性选择器</h2><p> 属性选择器是一种特殊类型的选择器，它根据元素的 属性和属性值来匹配元素。它们的通用语法由方括号([]) 组成，其中包含属性名称，后跟可选条件以匹配属性的值。 属性选择器可以根据其匹配属性值的方式分为两类： 存在和值属性选择器和子串值属性选择器。<br><strong>存在和值属性选择器</strong><br>    [attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_lijia"</span>&gt;李嘉&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_ztj"</span>&gt;张腾金&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_hjl"</span>&gt;何佳林&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_lx"</span>&gt;李旋&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span>&gt;一路&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[name]</span>&#123;<span class="attribute">color</span>: pink;&#125;</span><br></pre></td></tr></table></figure><p> 运行只有”一路”字体颜色没有变成粉红色。其他四个div的字体变粉红色。<br>    [attr=val]该选择器仅选择 attr 属性被赋值为 val 的所有元素。<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[name = "hdjtdx_lijia"]</span>&#123;<span class="attribute">color</span>: pink;&#125;</span><br></pre></td></tr></table></figure></p><p> 以上面的例子为例，此时运行只有”李嘉”字体颜色变成粉红色<br>   [attr~=val]：表示带有以 attr 命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少一个值为val。<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_lijia hdjtdx"</span>&gt;李嘉&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_ztj"</span>&gt;张腾金&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_hjl hdjtdx yichun"</span>&gt;何佳林&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_lx"</span>&gt;李旋&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span>&gt;一路&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[name ~= "hdjtdx"]</span>&#123;<span class="attribute">color</span>: pink;&#125;</span><br></pre></td></tr></table></figure><p>  运行”李嘉”和”何佳林”变成粉红色的，其他的不变。</p><h2 id="4-子串值属性选择器"><a href="#4-子串值属性选择器" class="headerlink" title="4.子串值属性选择器"></a>4.子串值属性选择器</h2><p> 这种情况的属性选择器也被称为“伪正则选择器”，因为它们提供类似 regular expression 的灵活匹配方式（但请注意，这些选择器并不是真正的正则表达式）：<br>        [attr|=val] : 选择attr属性的值是val（包括val）或以val-开头的元素。<br>        [attr^=val] : 选择attr属性的值以val开头（包括val）的元素。<br>        [attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。<br>        [attr*=val] : 选择attr属性的值中包含字符串val的元素。</p> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_lijia hdjtdx"</span>&gt;李嘉&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx-ztj"</span>&gt;张腾金&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_hjl hdjtdx"</span>&gt;何佳林&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"hdjtdx_lx"</span>&gt;李旋&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">name</span>=<span class="string">"yilu-hdjtdx"</span>&gt;一路&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[name|="hdjtdx"]</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   运行后”张腾金”字体变成粉红色字体，其他的不变。<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-attr">[name^="hdjtdx"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: pink;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p> 运行后只有”一路”字体不变，因为它的name属性不是以hdjtdx开头的元素。其他四个div里面的字体颜色都变成粉红色。<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[name$="hdjtdx"]</span>&#123;</span><br><span class="line">   <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  运行后”李嘉”,”何佳林”和”一路”字体变成粉红色，因为它的name属性是以hdjtdx结尾的元素。<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[name*="z"]</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   运行后只有”张腾金”字体变成粉红色，因为它的name属性的值包含字符串”z”的元素</p><h2 id="5-伪类与伪元素选择器"><a href="#5-伪类与伪元素选择器" class="headerlink" title="5.伪类与伪元素选择器"></a>5.伪类与伪元素选择器</h2><p> 什么是伪类呢？简单点说，就是你没定义这个类，但它确实作为一个类来使用。（这些类确实存在，浏览器在后台会向这些类增加和删除元素）<br><strong>链接伪类</strong><br>    :link         表示作为超链接，并指向一个未访问的地址的所有锚<br>    :visited    表示作为超链接，并指向一个已访问的地址的所有锚<br>    :target     代表一个特殊的元素，它的id是URI的片段标识符<br>    注意:link，:visited，:target是作用于链接元素的！<br><strong>动态伪类</strong><br>    :hover        表示悬浮到元素上<br>     :active        表示匹配被用户激活的元素（点击按住时）<br>     注意:hover，:active基本可以作用于所有的元素！<br>    隐私与:visited选择器<br>    只有下列的属性才能被应用到已访问链接：<br>      color<br>      background-color<br>      border-color<br>　   a链接的四个伪类的书写顺序一定要正确，否则浏览器可能不会显示预期的结果。也即这样写：</p><pre><code>1 a:link{color:black;}2 a:visited{color:gray;}3 a:hover{color:red;}4 a:active{color:blue;}</code></pre><p> 首先注意关键的两点：<br> 1.这4个伪类特指度相同。<br> 2.一个链接可能同时处于多种状态，即同时属于多个伪类。<br> 未点击链接前，link伪类长期处于激活状态，鼠标悬停（或点击）时，a链接同时处于link和hover(或active)状态，由于它们特指度相同，在同时激活的情况下，后出现的伪类样式会覆盖前面的伪类样式，故link状态必须写在hover(或active)之前。<br> 再讨论hover和active的顺序，若把hover放在active后面，当点击链接一瞬，实际你在激活active状态的同时触发了hover伪类,hover在后面覆盖了active的颜色，所以无法看到active的颜色。故hover在active之前<br> 其次，若把visited放在hover后面，那已访问过的链接一直触发着visited伪类，会覆盖hover样式。<br> 最后，其实link、visited两个伪类之间顺序无所谓。（因为它俩不可能同时触发，即又未访问同时又已访问。）<br> 记这顺序有个小招数，“LoVe？ HA!”。<br> 此处参考地址：<a href="http://www.cnblogs.com/xiayi/" target="_blank" rel="noopener">http://www.cnblogs.com/xiayi/</a></p><p><strong>表单相关伪类</strong><br>            :enabled    匹配可编辑的表单<br>            :disable    匹配被禁用的表单<br>            :checked    匹配被选中的表单<br>            :focus        匹配获焦的表单</p><p><strong>结构性伪类</strong><br>            index的值从1开始计数！！！！<br>            index可以为变量n(只能是n)<br>            index可以为even odd</p><pre><code>#wrap ele:nth-child(index)        表示匹配#wrap中第index的子元素 这个子元素必须是ele#wrap ele:nth-of-type(index)    表示匹配#wrap中第index的ele子元素除此之外:nth-child和:nth-of-type有一个很重要的区别！！nth-of-type以元素为中心！！！:nth-child(index)系列:first-child:last-child:nth-last-child(index):only-child    (相对于:first-child:last-child 或者 :nth-child(1):nth-last-child(1)):nth-of-type(index)系列:first-of-type:last-of-type:nth-last-type(index):only-of-type    (相对于:first-of-type:last-of-type 或者 :nth-of-type(1):nth-last-of-type(1))</code></pre><p> :nth-child和:nth-of-type这两个系列的用法和区别我就不详细分析了。大家可以参考：<a href="https://blog.csdn.net/liuyan19891230/article/details/52839788" target="_blank" rel="noopener">https://blog.csdn.net/liuyan19891230/article/details/52839788</a><br> :not     否定伪类，用于匹配不符合参数选择器的元素；<br>  :empty 配没有子元素的元素。如果元素中含有文本节点、HTML元素或者一个空格，则:empty不能匹配这个元素；(内容必须是空的，有空格都不行，有attr没关系)<br><strong>伪元素</strong><br>    ::before/:before　 　在某个元素之前插入一些内容；<br>    ::after/:after　　　在某个元素之后插入一些内容；<br>    ::first-letter/:first-letter　为某个元素中的文字的首字母或第一个字使用样式；<br>    ::first-line/:first-line　　为某个元素的第一行文字使用样式；<br>     ::selection　　 匹配用户被用户选中或者处于高亮状态的部分<br> 注：上面并没有把CSS3里面的所有选择器列出来，只总结了一些比较常用的选择器。由于小弟我水平有限，难免有不足之处，希望各位大佬多多指点。</p>]]></content>
    
    <summary type="html">
    
      最近几天将CSS3学习了一下，CSS3里面增加了一些新的知识点。学完之后，在这里做一个小总结,今天先总结关于选择器的一些知识点，后面会陆续发布新的UI方案，过渡，动画和布局扩展等知识。
    
    </summary>
    
      <category term="CSS" scheme="http://Li970211.github.io/categories/CSS/"/>
    
    
      <category term="CSS3" scheme="http://Li970211.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>myPhoto</title>
    <link href="http://Li970211.github.io/2018/03/25/myPhoto/"/>
    <id>http://Li970211.github.io/2018/03/25/myPhoto/</id>
    <published>2018-03-25T06:59:40.000Z</published>
    <updated>2018-03-25T08:01:35.520Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/25/myPhoto/3.jpg" alt="厦门"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/25/myPhoto/3.jpg&quot; alt=&quot;厦门&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS布局解决方案(1)---居中布局</title>
    <link href="http://Li970211.github.io/2018/03/24/CSS%E5%B8%83%E5%B1%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-1-%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80/"/>
    <id>http://Li970211.github.io/2018/03/24/CSS布局解决方案-1-居中布局/</id>
    <published>2018-03-24T07:06:59.000Z</published>
    <updated>2018-03-24T07:59:21.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h1><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><p> <strong>1. 使用inline-block+text-align</strong><br> （1）原理、用法</p><p> 原理：先将子框由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中。</p><p> 用法：对子框设置display:inline-block，对父框设置text-align:center。</p><p> （2）代码实例<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  （3）优缺点</p><p> 优点:兼容性好，甚至可以兼容ie6、ie7</p><p> 缺点:child里的文字也会水平居中，可以在.child添加text-align:left;还原</p><p> <strong>2. 使用table+margin</strong></p><p>（1）原理、用法</p><p>原理：先将子框设置为块级表格来显示（类似 <table>），再设置子框居中以达到水平居中。</table></p><p>用法：对子框设置display:table，再设置margin:0 auto。</p><p>（2）代码实例<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> （3）优缺点：</p><p> 优点：只设置了child，ie8以上都支持</p><p> 缺点：不支持ie6、ie7,将div换成table</p><p> <strong>3. 使用absolute+transform</strong></p><p> （1）原理、用法</p><p> 原理：将子框设置为绝对定位，移动子框，使子框左侧距离相对框左侧边框的距离为相对框宽度的一半，再通过向左移动子框的一半宽度以达到水平居中。当然，在此之前，我们需要设置父框为相对定位，使父框成为子框的相对框。</p><p> 用法：对父框设置position:relative，对子框设置position:absolute，left:50%，transform:translateX(-50%)。</p><p> （2）代码实例<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child”&gt;DEMO&lt;/div&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;/div&gt;</span></span></span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>:absolute;</span><br><span class="line">   <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）优缺点<br> 优点:居中元素不会对其他的产生影响<br> 缺点:transform属于css3内容，兼容性存在一定问题，高版本浏览器需要添加一些前缀</p><p> <strong>4. 使用flex+margin</strong><br> （1）原理、用法<br> 原理：通过CSS3中的布局利器flex将子框转换为flex item，再设置子框居中以达到居中。<br> 用法：先将父框设置为display:flex，再设置子框margin:0 auto。<br> （2）代码实例<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）优缺点<br> 缺点:低版本浏览器(ie6 ie7 ie8)不支持<br> <strong>5. 使用flex+justify-content</strong><br> （1）原理、用法<br> 原理：通过CSS3中的布局利器flex中的justify-content属性来达到水平居中。<br> 用法：先将父框设置为display:flex，再设置justify-content:center。<br> （2）代码实例<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>:flex;</span><br><span class="line">   <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）优缺点<br> 优点:设置parent即可<br> 缺点:低版本浏览器(ie6 ie7 ie8)不支持</p><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p> <strong>1. 使用table-cell+vertical-align</strong><br> （1）原理、用法<br> 原理：通过将父框转化为一个表格单元格显示（类似 <td> 和 <th>），再通过设置属性，使表格单元格内容垂直居中以达到垂直居中。<br> 用法：先将父框设置为display:table-cell，再设置vertical-align:middle。<br> （2）代码实例<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></th></td></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>:table-cell;</span><br><span class="line">   <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）优缺点<br> 优点:兼容性较好，ie8以上均支持</p><p> <strong>2. 使用absolute+transform</strong><br> （1）原理、用法<br> 原理：类似于水平居中时的absolute+transform原理。将子框设置为绝对定位，移动子框，使子框上边距离相对框上边边框的距离为相对框高度的一半，再通过向上移动子框的一半高度以达到垂直居中。当然，在此之前，我们需要设置父框为相对定位，使父框成为子框的相对框。<br> 用法：先将父框设置为position:relative，再设置子框position:absolute，top:50%，transform:translateY(-50%)。<br> （2）代码实例<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>:absolute;</span><br><span class="line">   <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）优缺点<br> 优点:居中元素不会对其他的产生影响<br> 缺点:transform属于css3内容，兼容性存在一定问题，高版本浏览器需要添加一些前缀<br> <strong>3. 使用flex+align-items</strong><br> （1）原理、用法<br> 原理：通过设置CSS3中的布局利器flex中的属性align-times，使子框垂直居中。<br> 用法：先将父框设置为position:flex，再设置align-items:center。<br> （2）代码实例<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>:flex;</span><br><span class="line">   <span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）优缺点<br> 优点:只设置parent<br> 缺点:兼容性存在一定问题</p><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><p> <strong>1. 使用absolute+transform</strong><br> （1）原理、用法<br> 原理：将水平居中时的absolute+transform和垂直居中时的absolute+transform相结合。详见：水平居中的3）和垂直居中的2）。<br> 见水平居中的3）和垂直居中的2）。<br> （2）代码实例<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><pre><code class="CSS"><span class="selector-class">.parent</span> {    <span class="attribute">position</span>:relative;}<span class="selector-class">.child</span> {    <span class="attribute">position</span>:absolute;    <span class="attribute">left</span>:<span class="number">50%</span>;    <span class="attribute">top</span>:<span class="number">50%</span>;    <span class="attribute">transform</span>:<span class="built_in">tranplate</span>(-50%,-50%);}</code></pre><p> （3）优缺点<br> 优点:child元素不会对其他元素产生影响<br> 缺点:兼容性存在一定问题</p><p> <strong>2. 使用inline-block+text-align+table-cell+vertical-align</strong><br> （1）原理、用法<br> 原理：使用inline-block+text-align水平居中，再用table-cell+vertical-align垂直居中，将二者结合起来。详见：水平居中的1）和垂直居中的1）。<br> 见水平居中的1）和垂直居中的1）。<br> （2）代码实例</p><pre><code class="html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span>   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>DEMO<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><pre><code class="CSS"> <span class="selector-class">.parent</span> {    <span class="attribute">text-align</span>:center;    <span class="attribute">display</span>:table-cell;    <span class="attribute">vertical-align</span>:middle;} <span class="selector-class">.child</span> {    <span class="attribute">display</span>:inline-block; }</code></pre><p> （3）优缺点<br> 优点:兼容性较好<br><strong>3. 使用flex+justify-content+align-items</strong><br> （1）原理、用法<br> 原理：通过设置CSS3布局利器flex中的justify-content和align-items，从而达到水平垂直居中。详见：水平居中的4）和垂直居中的3）。<br> 见水平居中的4）和垂直居中的3）。<br> （2）代码实例</p><pre><code class="html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span>   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child&gt;DEMO&lt;/div&gt;</span></span><span class="tag"><span class="string">&lt;/div&gt;</span></span></code></pre><pre><code class="CSS"><span class="selector-class">.parent</span> {    <span class="attribute">display</span>:flex;    <span class="attribute">justify-content</span>:center;    <span class="attribute">align-items</span>:center; }</code></pre><p> <em>（3）优缺点 </em>优点:只设置了parent<br> *缺点:兼容性存在一定问题</p><h2 id="文章出处"><a href="#文章出处" class="headerlink" title="文章出处"></a>文章出处</h2><p> 微信公众号：<br> 前端大牛爱好者<a href="http://mp.weixin.qq.com/s/0GPYT4mtOQxh4blJRDGvVQ" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/0GPYT4mtOQxh4blJRDGvVQ</a></p>]]></content>
    
    <summary type="html">
    
      前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架的搭建之中，又有居中布局、多列布局以及全局布局，今天我们就来总结总结前端干货中的CSS布局。
    
    </summary>
    
      <category term="CSS" scheme="http://Li970211.github.io/categories/CSS/"/>
    
    
      <category term="HTML" scheme="http://Li970211.github.io/tags/HTML/"/>
    
      <category term="CSS布局" scheme="http://Li970211.github.io/tags/CSS%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>理解js中的this</title>
    <link href="http://Li970211.github.io/2018/03/23/%E7%90%86%E8%A7%A3js%E4%B8%AD%E7%9A%84this/"/>
    <id>http://Li970211.github.io/2018/03/23/理解js中的this/</id>
    <published>2018-03-23T03:15:58.000Z</published>
    <updated>2018-03-25T09:11:27.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-开始"><a href="#一-开始" class="headerlink" title="一.开始"></a>一.开始</h1><p> 　首先必须要说的是，this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象（这句话有些问题，后面会解释为什么会有问题，虽然网上大部分的文章都是这样说的，虽然在很多情况下那样去理解不会出什么问题，但是实际上那样理解是不准确的，所以在你理解this的时候会有种琢磨不透的感觉），那么接下来我会深入的探讨这个问题。</p><p>　　为什么要学习this？如果你学过面向对象编程，那你肯定知道干什么用的，如果你没有学过，那么暂时可以不用看这篇文章，当然如果你有兴趣也可以看看，毕竟这是js中必须要掌握的东西。</p><h2 id="二-例子说明"><a href="#二-例子说明" class="headerlink" title="二.例子说明"></a>二.例子说明</h2><h3 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="string">"追梦子"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//Window</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p> 按照我们上面说的this最终指向的是调用它的对象，这里的函数a实际是被Window对象所点出来的，下面的代码就可以证明。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="string">"追梦子"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);　　<span class="comment">//Window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.a();</span><br></pre></td></tr></table></figure><p> 和上面代码一样吧，其实alert也是window的一个属性，也是window点出来的。</p><h3 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    user:<span class="string">"追梦子"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.user);  <span class="comment">//追梦子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.fn();</span><br></pre></td></tr></table></figure><p> 这里的this指向的是对象o，因为你调用这个fn是通过o.fn()执行的，那自然指向就是对象o，这里再次强调一点，this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁，一定要搞清楚这个。</p><p>其实例子1和例子2说的并不够准确，下面这个例子就可以推翻上面的理论。</p><p>如果要彻底的搞懂this必须看接下来的几个例子</p><h3 id="例子3："><a href="#例子3：" class="headerlink" title="例子3："></a>例子3：</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    user:<span class="string">"一路"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//追梦子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.o.fn();</span><br></pre></td></tr></table></figure><p> 这段代码和上面的那段代码几乎是一样的，但是这里的this为什么不是指向window，如果按照上面的理论，最终this指向的是调用它的对象，这里先说个而外话，window是js中的全局对象，我们创建的变量实际上是给window添加属性，所以这里可以用window点o对象。<br> 这里先不解释为什么上面的那段代码this为什么没有指向window，我们再来看一段代码。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:&#123;</span><br><span class="line">        a:<span class="number">12</span>,</span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.b.fn();</span><br></pre></td></tr></table></figure></p><p> 这里同样也是对象o点出来的，但是同样this并没有执行它，那你肯定会说我一开始说的那些不就都是错误的吗？其实也不是，只是一开始说的不准确，接下来我将补充一句话，我相信你就可以彻底的理解this的指向的问题。</p><p>　　情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。</p><p>　　情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。</p><p>　　情况3：如果一个函数中有this，<strong>这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，</strong>例子3可以证明，如果不相信，那么接下来我们继续看几个例子。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:&#123;</span><br><span class="line">        <span class="comment">// a:12,</span></span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.b.fn();</span><br></pre></td></tr></table></figure><p> 尽管对象b中没有属性a，这个this指向的也是对象b，因为this只会指向它的上一级对象，不管这个对象中有没有this要的东西。</p><p> ###还有一种比较特殊的情况，例子4：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:&#123;</span><br><span class="line">        a:<span class="number">12</span>,</span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> j = o.b.fn;</span><br><span class="line">j();</span><br></pre></td></tr></table></figure></p><p> 这里this指向的是window，是不是有些蒙了？其实是因为你没有理解一句话，这句话同样至关重要。</p><p>　　this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的，例子4中虽然函数fn是被对象b所引用，但是在将fn赋值给变量j的时候并没有执行所以最终指向的是window，这和例子3是不一样的，例子3是直接执行了fn。</p><p>　　this讲来讲去其实就是那么一回事，只不过在不同的情况下指向的会有些不同，上面的总结每个地方都有些小错误，也不能说是错误，而是在不同环境下情况就会有不同，所以我也没有办法一次解释清楚，只能你慢慢地的去体会。</p><p> ###构造函数版this：<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">"追梦子"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//追梦子</span></span><br></pre></td></tr></table></figure></p><p> 这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，为什么我说a是对象，因为用了new关键字就是创建一个对象实例，理解这句话可以想想我们的例子3，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象a中会有user，因为你已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p> “追梦子”的博客：<a href="https://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="noopener">https://www.cnblogs.com/pssp/p/5216085.html</a></p>]]></content>
    
    <summary type="html">
    
      本文章帮助大家理解JS中的this。
    
    </summary>
    
      <category term="javascript" scheme="http://Li970211.github.io/categories/javascript/"/>
    
    
      <category term="js中的this" scheme="http://Li970211.github.io/tags/js%E4%B8%AD%E7%9A%84this/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://Li970211.github.io/2018/03/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://Li970211.github.io/2018/03/22/正则表达式/</id>
    <published>2018-03-22T04:07:37.000Z</published>
    <updated>2018-03-24T06:28:00.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则速查表"><a href="#正则速查表" class="headerlink" title="正则速查表"></a>正则速查表</h1><p> 自己收集了一套针对工作中所需的正则表达式. 多适用于字符串处理、表单验证、日志数据分析等场合，实用高效, 将长期维护。</p><blockquote><p>Tips：在本文找想要的正则时，可以尝试使用浏览器的快速查询功能。<code>Ctrl + F</code>输入关键字能提高查询的效率哟~</p></blockquote><hr><h2 id="常用的正則方法示例"><a href="#常用的正則方法示例" class="headerlink" title="常用的正則方法示例"></a>常用的正則方法示例</h2><p> <strong>replace:</strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用正则匹配中文字节, 将其替换为xx, 再获取字符串的长度就是完整的长度了.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLen</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[^\x00-\xff]/g</span>, <span class="string">'xx'</span>).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>test:</strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配是否符合邮件规则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test返回一个布尔值, 表示是否匹配到制定字符串</span></span><br><span class="line"><span class="keyword">var</span> mail = reg.test(<span class="string">'1437690868@qq.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mail) &#123;</span><br><span class="line">  <span class="comment">// 如果邮件格式正确的话, 就可以做点啥了(雾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见的表单验证"><a href="#常见的表单验证" class="headerlink" title="常见的表单验证"></a>常见的表单验证</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户名正则，4到16位（字母，数字，下划线，减号）</span></span><br><span class="line"><span class="keyword">var</span> userNameReg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</span></span><br><span class="line"><span class="keyword">var</span> passwordReg = <span class="regexp">/^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配邮箱地址</span></span><br><span class="line"><span class="keyword">var</span> mailReg = <span class="regexp">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国六位数的邮政编码</span></span><br><span class="line"><span class="keyword">var</span> postalCode = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配15~18位身份证</span></span><br><span class="line"><span class="keyword">var</span> IDCard = <span class="regexp">/(^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$)|(^[1-9]\d&#123;5&#125;\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;2&#125;$)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配18位的新版身份证</span></span><br><span class="line"><span class="keyword">var</span> IDCard_18 = <span class="regexp">/^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;</span><br></pre></td></tr></table></figure><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ipv4地址正则</span></span><br><span class="line"><span class="keyword">var</span> IPReg = <span class="regexp">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reg Hex颜色正则</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// URL正则</span></span><br><span class="line"><span class="keyword">var</span> urlReg= <span class="regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配JSON格式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br></pre></td></tr></table></figure><p> 匹配<code>json</code>字符串</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = response.data;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> ret === <span class="string">'string'</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br><span class="line">  <span class="keyword">var</span> matches = ret.match(reg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (matches) ret = <span class="built_in">JSON</span>.parse(matches[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">res.json(ret);</span><br></pre></td></tr></table></figure><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5-11位的腾讯qq号</span></span><br><span class="line"><span class="keyword">var</span> qqReg = <span class="regexp">/^[1-9][0-9]&#123;4,11&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span></span><br><span class="line"><span class="keyword">var</span> qqReg = <span class="regexp">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 国内常见</span></span><br><span class="line"><span class="keyword">var</span> phone = <span class="regexp">/^1[3|5|8|9]\d&#123;9&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定电话</span></span><br><span class="line"><span class="keyword">var</span> telephone = <span class="regexp">/^(0[0-9]&#123;2&#125;)\d&#123;8&#125;$|^(0[0-9]&#123;3&#125;(\d&#123;7,8&#125;))$/</span>;</span><br></pre></td></tr></table></figure><h3 id="匹配特定数字"><a href="#匹配特定数字" class="headerlink" title="匹配特定数字"></a>匹配特定数字</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配正整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配负整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非负整数（正整数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非正整数（负整数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-[1-9]\d*|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配正浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配负浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非负浮点数（正浮点数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非正浮点数（负浮点数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$/</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配由26个英文字母组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由26个英文字母的大写组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由26个英文字母的小写组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由数字和26个英文字母组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z0-9]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由数字、26个英文字母或者下;划线组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配空白行的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\n\s*\r/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配首尾空白字符的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\s*|\s*$/</span>;</span><br><span class="line"><span class="keyword">var</span> rtrim = <span class="regexp">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配双字节字符(包括汉字在内, 一个双字节字符长度计2，ASCII字符计1)</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^\x00-\xff]/g</span>;</span><br></pre></td></tr></table></figure><hr><hr><h3 id="正则技巧"><a href="#正则技巧" class="headerlink" title="正则技巧"></a>正则技巧</h3><h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如这里我们想让这个日期格式反转</span></span><br><span class="line"><span class="comment">// 正则括号是一个分组, 下面的代码就捕获了三个分组</span></span><br><span class="line"><span class="comment">// 通过$分组符来转换位置, 来达到我们想要的结果</span></span><br><span class="line"><span class="string">'2018-3-21'</span>.replace(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/g</span>, <span class="string">'$2/$3/$1'</span>) <span class="comment">// "3/21/2018"</span></span><br></pre></td></tr></table></figure><h4 id="忽略分組"><a href="#忽略分組" class="headerlink" title="忽略分組"></a>忽略分組</h4><p> 不希望捕获某些分组, 只需要分组内加上<code>?:</code>即可:</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?:Byron).(ok)/</span>;</span><br><span class="line"><span class="string">'Byron-ok'</span>.replace(reg, <span class="string">'$1'</span>);  <span class="comment">// 只匹配了 ok</span></span><br></pre></td></tr></table></figure><h4 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h4><table><thead><tr><th>名字</th><th>正則</th></tr></thead><tbody><tr><td>正向前瞻</td><td>exp(?=assert)</td></tr><tr><td>负向前瞻</td><td>exp(?!assert)</td></tr></tbody></table><p> 正向前瞻就是匹配前者, 效验后者是否存在.</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则的意思是: 匹配一个单词字符( [a-zA-Z0-9_] ), 然后验证后面是不是数字</span></span><br><span class="line"><span class="comment">// 结果为: "X2*3". 因为3后面没有数字, 所以没有匹配到.</span></span><br><span class="line"><span class="string">'a2*3'</span>.replace(<span class="regexp">/\w(?=\d)/g</span>, <span class="string">'X'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为: "X2*X4X8"</span></span><br><span class="line"><span class="comment">// 总的说就是</span></span><br><span class="line"><span class="string">'a2*34v8'</span>.replace(<span class="regexp">/\w(?=\d)/g</span>, <span class="string">'X'</span>)</span><br></pre></td></tr></table></figure><p> 负向前瞻则相反, 匹配前面, 替代后面</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 2 是单词字符, 后面不是数字, 被替换成X</span></span><br><span class="line"><span class="comment">// * 不是单词字符 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 3 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 4 是单词字符, 后面不是数字, 被替换成X</span></span><br><span class="line"><span class="comment">// v 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 8 是单词字符, 后面没有匹配到数字, 被替换成X</span></span><br><span class="line"><span class="comment">// 结果: aX*4XvX</span></span><br><span class="line"><span class="string">'a2*34v8'</span>.replace(<span class="regexp">/\w(?!\d)/g</span>, <span class="string">'X'</span>)</span><br></pre></td></tr></table></figure><hr><p> 最后如果有哪些正则规则有问题的, 可以留言探讨一下呀~<br> 参考链接：<br> <a href="https://github.com/anran758" target="_blank" rel="noopener">https://github.com/anran758</a></p>]]></content>
    
    <summary type="html">
    
      本文章介绍一些常见的正则表达式。
    
    </summary>
    
      <category term="javascript" scheme="http://Li970211.github.io/categories/javascript/"/>
    
    
      <category term="js中的正则表达式" scheme="http://Li970211.github.io/tags/js%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="http://Li970211.github.io/2018/03/21/hello/"/>
    <id>http://Li970211.github.io/2018/03/21/hello/</id>
    <published>2018-03-21T04:29:06.000Z</published>
    <updated>2018-03-25T08:24:00.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大家好！我叫<strong>李嘉</strong>，来自江西省萍乡市。现就读于<strong>华东交通大学软件学院</strong>，在以后的日子中要努力学习，用知识武装自己。加油！！！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;大家好！我叫&lt;strong&gt;李嘉&lt;/strong&gt;，来自江西省萍乡市。现就读于&lt;strong&gt;华东交通大学软件学院&lt;/strong&gt;，在以后的日子中要努力学习，用知识武装自己。加油！！！&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
